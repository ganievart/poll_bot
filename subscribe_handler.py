#!/usr/bin/env python3
"""
Subscribe Handler for Telegram Bot
Handles /subscribe command with funny responses
"""

import random
import logging
from telegram import Update
from telegram.ext import ContextTypes

# Import database functions
try:
    from subscriber_storage import (
        add_subscriber, remove_subscriber, is_subscribed, 
        get_all_subscribers, get_subscriber_count, get_subscriber_ids,
        deactivate_subscriber, test_connection
    )
    DATABASE_AVAILABLE = True
except ImportError as e:
    logger.warning(f"Database not available, using in-memory storage: {e}")
    DATABASE_AVAILABLE = False

# Configure logging
logger = logging.getLogger(__name__)

class SubscribeHandler:
    """Handler for subscription functionality with humor"""
    
    def __init__(self):
        # Fallback to in-memory storage if database not available
        self.subscribers = set() if not DATABASE_AVAILABLE else None
        self.funny_messages = [
            "–£—Å–ø–µ—à–Ω–æ! –¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ... —á—Ç–æ –±—ã —ç—Ç–æ –Ω–∏ –±—ã–ª–æ.",
            "–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. –£—Ä–æ–≤–µ–Ω—å –∫—Ä—É—Ç–æ—Å—Ç–∏ +1. –ü–æ—á—Ç–∏ –∫–∞–∫ —É —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞ —Å Wi-Fi.",
            "–¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω. –¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –≤—Å—ë. –ù—É, –ø–æ—á—Ç–∏ –≤—Å—ë. –õ–∞–¥–Ω–æ, —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ —è –∑–∞—Ö–æ—á—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.",
            "–£—Å–ø–µ—Ö! –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –ò–Ω–æ–≥–¥–∞. –ö–æ–≥–¥–∞ –±–æ—Ç –≤—Å–ø–æ–º–Ω–∏—Ç –æ —Ç–µ–±–µ.",
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —Ç–µ–ø–µ—Ä—å –≤ —ç–ª–∏—Ç–Ω–æ–º –∫–ª—É–±–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤. –ß–ª–µ–Ω—Å–∫–∏–π –±–∏–ª–µ—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –ò–ª–∏ –Ω–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π. –ü–æ—Å–º–æ—Ç—Ä–∏–º.",
            "–ì–æ—Ç–æ–≤–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ... –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –æ—á–µ–Ω—å —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ.",
            "–¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è! –¢–µ–ø–µ—Ä—å —Ç—ã —á–∞—Å—Ç—å —á–µ–≥–æ-—Ç–æ –±–æ–ª—å—à–µ–≥–æ. –ò–ª–∏ –º–µ–Ω—å—à–µ–≥–æ. –†–∞–∑–º–µ—Ä –Ω–µ –≤–∞–∂–µ–Ω.",
            "–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω! –û–∂–∏–¥–∞–π —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é... –∏–ª–∏ —á–µ—Ä–µ–ø–∞—à—å–µ–π.",
            "–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è —Å '–æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫' –Ω–∞ '–ø–æ–¥–ø–∏—Å—á–∏–∫ –±–æ—Ç–∞'.",
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –≤ –º–æ—ë–º —Å–ø–∏—Å–∫–µ VIP. Very Important... Person? Penguin? Potato?",
            "–¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω! –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –∑–Ω–∞–µ—Ç –æ —Ç–≤–æ—ë–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏. –≠—Ç–æ —Ö–æ—Ä–æ—à–æ –∏–ª–∏ –ø–ª–æ—Ö–æ - –≤—Ä–µ–º—è –ø–æ–∫–∞–∂–µ—Ç.",
            "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –∫ –ø–æ—Ç–æ–∫—É... —á–µ–≥–æ-—Ç–æ. –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ —á–µ–≥–æ-—Ç–æ.",
            "–£—Å–ø–µ—Ö! –¢—ã —Ç–µ–ø–µ—Ä—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫. –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—á—Ç–æ–π –≥–æ–ª—É–±–µ–π.",
            "–ì–æ—Ç–æ–≤–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±—É–¥—É—â–µ–µ... –∏–ª–∏ –≤ –ø—Ä–æ—à–ª–æ–µ. –Ø –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–∏."
        ]
        
        self.already_subscribed_messages = [
            "–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω! –î–≤–∞–∂–¥—ã –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–µ–ª—å–∑—è - —ç—Ç–æ –ø—Ä–æ—Ç–∏–≤ –ø—Ä–∞–≤–∏–ª —Ñ–∏–∑–∏–∫–∏.",
            "–≠–π, —Ç—ã —É–∂–µ –≤ –∫–ª—É–±–µ! –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Ä–∞–∑—Ä—ã–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞-–≤—Ä–µ–º–µ–Ω–∏.",
            "–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å—á–∏–∫! –ë–æ–ª—å—à–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–µ–∫—É–¥–∞. –≠—Ç–æ –º–∞–∫—Å–∏–º—É–º –∫—Ä—É—Ç–æ—Å—Ç–∏.",
            "–°—Ç–æ–ø! –¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω. –ï—â—ë –æ–¥–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏ –±–æ—Ç –º–æ–∂–µ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å—Å—è.",
            "–¢—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ! –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º–∏ –∫–æ–Ω–≤–µ–Ω—Ü–∏—è–º–∏ –±–æ—Ç–æ–≤.",
            "–£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω! –ü–æ–ø—ã—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
            "–¢—ã —É–∂–µ —á–ª–µ–Ω –Ω–∞—à–µ–≥–æ —ç–ª–∏—Ç–Ω–æ–≥–æ –∫–ª—É–±–∞! –ß–ª–µ–Ω—Å—Ç–≤–æ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∏ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è.",
            "–°—Ç–æ–ø-—Å—Ç–æ–ø! –¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å—á–∏–∫. –ë–æ–ª—å—à–µ –ø–æ–¥–ø–∏—Å–æ–∫ - –±–æ–ª—å—à–µ —Ö–∞–æ—Å–∞ –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π."
        ]
    
    async def subscribe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /subscribe command"""
        try:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            username = update.effective_user.username
            first_name = update.effective_user.first_name
            last_name = update.effective_user.last_name
            display_name = username or first_name or "–ê–Ω–æ–Ω–∏–º"
            
            logger.info(f"Subscribe command from user {user_id} (@{display_name}) in chat {chat_id}")
            
            if DATABASE_AVAILABLE:
                # Check if user is already subscribed using database
                if is_subscribed(user_id):
                    message = random.choice(self.already_subscribed_messages)
                    logger.info(f"User {user_id} already subscribed")
                else:
                    # Add user to database (only user_id)
                    success = add_subscriber(user_id)
                    if success:
                        message = random.choice(self.funny_messages)
                        total_count = get_subscriber_count()
                        logger.info(f"User {user_id} subscribed successfully. Total subscribers: {total_count}")
                    else:
                        message = random.choice(self.already_subscribed_messages)
                        logger.info(f"User {user_id} already subscribed (database check)")
            else:
                # Fallback to in-memory storage
                if user_id in self.subscribers:
                    message = random.choice(self.already_subscribed_messages)
                    logger.info(f"User {user_id} already subscribed")
                else:
                    self.subscribers.add(user_id)
                    message = random.choice(self.funny_messages)
                    logger.info(f"User {user_id} subscribed successfully. Total subscribers: {len(self.subscribers)}")
            
            # Send funny response
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"Error in subscribe command: {e}")
            await update.message.reply_text(
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π... –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç—ã —Ç–æ–∂–µ –∏–Ω–æ–≥–¥–∞ –æ—à–∏–±–∞—é—Ç—Å—è. ü§ñ"
            )
    
    async def unsubscribe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /unsubscribe command"""
        try:
            user_id = update.effective_user.id
            username = update.effective_user.username or update.effective_user.first_name or "–ê–Ω–æ–Ω–∏–º"
            
            logger.info(f"Unsubscribe command from user {user_id} (@{username})")
            
            unsubscribe_messages = [
                "–û—Ç–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. –¢—ã –ø–æ–∫–∏–¥–∞–µ—à—å –Ω–∞—à —ç–ª–∏—Ç–Ω—ã–π –∫–ª—É–±... –ì—Ä—É—Å—Ç–Ω–æ. üò¢",
                "–¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è. –£—Ä–æ–≤–µ–Ω—å –∫—Ä—É—Ç–æ—Å—Ç–∏ -1. –¢–µ–ø–µ—Ä—å —Ç—ã –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –±–µ–∑ Wi-Fi.",
                "–û—Ç–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞. –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π... –ü–æ–∫–∞ —Ç—ã –Ω–µ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å.",
                "–ì–æ—Ç–æ–≤–æ! –¢—ã —Å–≤–æ–±–æ–¥–µ–Ω –æ—Ç –Ω–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –õ–µ—Ç–∏, –∫–∞–∫ –ø—Ç–∏—Ü–∞! üïäÔ∏è",
                "–û—Ç–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú—ã –±—É–¥–µ–º —Å–∫—É—á–∞—Ç—å... –ò–ª–∏ –Ω–µ—Ç. –ü–æ—Å–º–æ—Ç—Ä–∏–º.",
                "–¢—ã –ø–æ–∫–∏–Ω—É–ª –∫–ª—É–±. –ß–ª–µ–Ω—Å–∫–∏–π –±–∏–ª–µ—Ç –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω. –í–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω.",
                "–û—Ç–ø–∏—Å–∞–ª—Å—è? –õ–∞–¥–Ω–æ. –ù–æ –∑–Ω–∞–π - –¥–≤–µ—Ä—å –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è!",
                "–û—Ç–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä—å —Ç—ã —Å–Ω–æ–≤–∞ –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫. –°–∫—É—á–Ω–æ, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ."
            ]
            
            not_subscribed_messages = [
                "–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω! –ù–µ–ª—å–∑—è –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ç–æ–≥–æ, –Ω–∞ —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω. –õ–æ–≥–∏–∫–∞!",
                "–°—Ç–æ–ø! –¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤. –û—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–µ –æ—Ç —á–µ–≥–æ.",
                "–û—à–∏–±–∫–∞! –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å, –ø–æ—Ç–æ–º –æ—Ç–ø–∏—Å—ã–≤–∞–π—Å—è.",
                "–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ - –Ω–µ—Ç –æ—Ç–ø–∏—Å–∫–∏. –í—Å—ë —á–µ—Å—Ç–Ω–æ!"
            ]
            
            if DATABASE_AVAILABLE:
                # Use database to check and remove subscription
                if is_subscribed(user_id):
                    success = deactivate_subscriber(user_id)
                    if success:
                        message = random.choice(unsubscribe_messages)
                        remaining_count = get_subscriber_count()
                        logger.info(f"User {user_id} unsubscribed. Remaining subscribers: {remaining_count}")
                    else:
                        message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                        logger.error(f"Failed to unsubscribe user {user_id}")
                else:
                    message = random.choice(not_subscribed_messages)
                    logger.info(f"User {user_id} tried to unsubscribe but wasn't subscribed")
            else:
                # Fallback to in-memory storage
                if user_id in self.subscribers:
                    self.subscribers.remove(user_id)
                    message = random.choice(unsubscribe_messages)
                    logger.info(f"User {user_id} unsubscribed. Remaining subscribers: {len(self.subscribers)}")
                else:
                    message = random.choice(not_subscribed_messages)
                    logger.info(f"User {user_id} tried to unsubscribe but wasn't subscribed")
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"Error in unsubscribe command: {e}")
            await update.message.reply_text(
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –æ—Ç–ø–∏—Å–∫–æ–π... –ú–æ–∂–µ—Ç, —Ç—ã –∑–∞—Å—Ç—Ä—è–ª –≤ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞–≤—Å–µ–≥–¥–∞? ü§î"
            )
    
    async def subscribers_count_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /subscribers command - show subscriber count"""
        try:
            if DATABASE_AVAILABLE:
                count = get_subscriber_count()
            else:
                count = len(self.subscribers)
            
            if count == 0:
                message = "–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –û–¥–∏–Ω–æ–∫–æ, –∫–∞–∫ –≤ –∫–æ—Å–º–æ—Å–µ... üöÄ"
            elif count == 1:
                message = "–£ –Ω–∞—Å 1 –ø–æ–¥–ø–∏—Å—á–∏–∫! –≠—Ç–æ –Ω–∞—á–∞–ª–æ –≤–µ–ª–∏–∫–æ–π –∏–º–ø–µ—Ä–∏–∏! üëë"
            elif count < 10:
                message = f"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {count}. –ú–∞–ª–µ–Ω—å–∫–∞—è, –Ω–æ –¥—Ä—É–∂–Ω–∞—è —Å–µ–º—å—è! üë®‚Äçüë©‚Äçüëß‚Äçüë¶"
            elif count < 100:
                message = f"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {count}. –£–∂–µ –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Ñ–∏–ª–∏–∞–ª! üè¢"
            else:
                message = f"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {count}. –≠—Ç–æ —É–∂–µ –∞—Ä–º–∏—è! –ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –∑–∞—Ö–≤–∞—Ç—É –º–∏—Ä–∞! üåç"
            
            await update.message.reply_text(message)
            logger.info(f"Subscriber count requested: {count}")
            
        except Exception as e:
            logger.error(f"Error in subscribers count command: {e}")
            await update.message.reply_text(
                "–ù–µ –º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤... –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–ª–æ–º–∞–ª—Å—è! üßÆ"
            )
    
    def get_subscribers(self):
        """Get list of all subscribers"""
        if DATABASE_AVAILABLE:
            return get_subscriber_ids()
        else:
            return list(self.subscribers)
    
    def is_subscribed_local(self, user_id: int) -> bool:
        """Check if user is subscribed"""
        if DATABASE_AVAILABLE:
            return is_subscribed(user_id)
        else:
            return user_id in self.subscribers
    
    def get_subscriber_count_local(self) -> int:
        """Get total number of subscribers"""
        if DATABASE_AVAILABLE:
            return get_subscriber_count()
        else:
            return len(self.subscribers)
    
    async def broadcast_message(self, context: ContextTypes.DEFAULT_TYPE, message: str):
        """Send message to all subscribers"""
        if DATABASE_AVAILABLE:
            subscriber_ids = get_subscriber_ids()
        else:
            subscriber_ids = list(self.subscribers)
            
        if not subscriber_ids:
            logger.info("No subscribers to broadcast to")
            return 0
        
        sent_count = 0
        failed_count = 0
        
        for user_id in subscriber_ids:
            try:
                await context.bot.send_message(chat_id=user_id, text=message)
                sent_count += 1
                logger.debug(f"Broadcast sent to user {user_id}")
                
                # No need to track message timestamps in simplified version
                        
            except Exception as e:
                logger.warning(f"Failed to send broadcast to user {user_id}: {e}")
                failed_count += 1
                
                # Remove user if they blocked the bot
                if "bot was blocked" in str(e).lower() or "user is deactivated" in str(e).lower():
                    if DATABASE_AVAILABLE:
                        try:
                            deactivate_subscriber(user_id)
                            logger.info(f"Deactivated user {user_id} from subscribers (blocked bot)")
                        except Exception as db_e:
                            logger.warning(f"Failed to deactivate user {user_id}: {db_e}")
                    else:
                        self.subscribers.discard(user_id)
                        logger.info(f"Removed user {user_id} from subscribers (blocked bot)")
        
        logger.info(f"Broadcast completed: {sent_count} sent, {failed_count} failed")
        return sent_count

# Global instance
subscribe_handler = SubscribeHandler()

# Export functions for easy import
async def handle_subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Wrapper function for subscribe command"""
    await subscribe_handler.subscribe_command(update, context)

async def handle_unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Wrapper function for unsubscribe command"""
    await subscribe_handler.unsubscribe_command(update, context)

async def handle_subscribers_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Wrapper function for subscribers count command"""
    await subscribe_handler.subscribers_count_command(update, context)

# Example usage functions
async def send_broadcast(context: ContextTypes.DEFAULT_TYPE, message: str):
    """Send broadcast message to all subscribers"""
    return await subscribe_handler.broadcast_message(context, message)

def get_all_subscribers():
    """Get list of all subscriber IDs"""
    return subscribe_handler.get_subscribers()

def get_subscriber_count_wrapper():
    """Get total subscriber count"""
    return subscribe_handler.get_subscriber_count_local()

def is_user_subscribed(user_id: int):
    """Check if specific user is subscribed"""
    return subscribe_handler.is_subscribed_local(user_id)